"""add department model

Revision ID: 80463f6d127e
Revises: eace13343791
Create Date: 2023-12-15 20:24:03.650104

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "80463f6d127e"
down_revision = "eace13343791"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "departments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.Column("code", sa.String(length=16), nullable=False),
        sa.Column("website", sa.String(length=128), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("school_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["school_id"],
            ["universities.id"],
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code", "school_id"),
    )
    with op.batch_alter_table("departments", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_departments_code"), ["code"], unique=False
        )

    with op.batch_alter_table("courses", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("department_id", sa.Integer(), nullable=False)
        )
        batch_op.create_index(
            batch_op.f("ix_courses_department_id"),
            ["department_id"],
            unique=False,
        )
        batch_op.create_foreign_key(
            None,
            "departments",
            ["department_id"],
            ["id"],
            onupdate="CASCADE",
            ondelete="CASCADE",
        )

        connection = op.get_bind()
        connection.execute(
            sa.text(
                """
CREATE OR REPLACE FUNCTION insert_dep_created_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.created_at = now();
   NEW.modified_at = now();
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE OR REPLACE FUNCTION update_dep_modified_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.modified_at = now();
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_dep_courses_modifed_at BEFORE UPDATE
ON departments
FOR EACH ROW EXECUTE PROCEDURE update_dep_modified_at_column();

CREATE TRIGGER insert_dep_courses_created_time BEFORE INSERT
ON departments
FOR EACH ROW EXECUTE PROCEDURE insert_dep_created_at_column();
"""
            )
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("courses", schema=None) as batch_op:
        # batch_op.drop_constraint(None, type_="foreignkey")
        batch_op.drop_index(batch_op.f("ix_courses_department_id"))
        batch_op.drop_column("department_id")

    with op.batch_alter_table("departments", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_departments_code"))

    op.drop_table("departments")
    # ### end Alembic commands ###
