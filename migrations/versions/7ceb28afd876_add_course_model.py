"""add course model

Revision ID: 7ceb28afd876
Revises: 34b291b84355
Create Date: 2023-12-15 14:50:48.744382

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "7ceb28afd876"
down_revision = "34b291b84355"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "courses",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=128), nullable=False),
        sa.Column("code", sa.String(length=16), nullable=False),
        sa.Column("website", sa.String(length=128), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("level", sa.Integer(), nullable=False),
        sa.Column("subject", sa.String(length=128), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.TIMESTAMP(timezone=True),
            nullable=False,
        ),
        sa.Column("school_id", sa.String(length=32), nullable=False),
        sa.ForeignKeyConstraint(
            ["school_id"],
            ["universities.short_name"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code", "school_id"),
    )
    with op.batch_alter_table("courses", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_courses_code"), ["code"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_courses_subject"), ["subject"], unique=False
        )

    connection = op.get_bind()
    connection.execute(
        sa.text(
            """
CREATE OR REPLACE FUNCTION insert_created_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.created_at = now();
   NEW.modified_at = now();
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE OR REPLACE FUNCTION update_modified_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.modified_at = now();
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_courses_modifed_at BEFORE UPDATE
ON courses
FOR EACH ROW EXECUTE PROCEDURE update_modified_at_column();

CREATE TRIGGER insert_courses_created_time BEFORE INSERT
ON courses
FOR EACH ROW EXECUTE PROCEDURE insert_created_at_column();
"""
        )
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("courses", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_courses_subject"))
        batch_op.drop_index(batch_op.f("ix_courses_code"))

    op.drop_table("courses")
    # ### end Alembic commands ###
